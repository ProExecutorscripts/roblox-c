--// Generated by roblox-c v1.0.0 \\--
--Note: This code will not be very clean.

local C = require(game.ReplicatedStorage:WaitForChild("Packages").cruntime)


function __math_errhandling()
end
function __fpclassifyf()
end
function __fpclassifyd()
end
function __fpclassifyl()
end
function __inline_isfinitef()
end
function __inline_isfinited()
end
function __inline_isfinitel()
end
function __inline_isinff()
end
function __inline_isinfd()
end
function __inline_isinfl()
end
function __inline_isnanf()
end
function __inline_isnand()
end
function __inline_isnanl()
end
function __inline_isnormalf()
end
function __inline_isnormald()
end
function __inline_isnormall()
end
function __inline_signbitf()
end
function __inline_signbitd()
end
function __inline_signbitl()
end
function __inline_isfinitef(__x)
	return __x==__x and __builtin_fabsf(__x)~=__builtin_inff() 
end
function __inline_isfinited(__x)
	return __x==__x and __builtin_fabs(__x)~=__builtin_inf() 
end
function __inline_isfinitel(__x)
	return __x==__x and __builtin_fabsl(__x)~=__builtin_infl() 
end
function __inline_isinff(__x)
	return __builtin_fabsf(__x)==__builtin_inff() 
end
function __inline_isinfd(__x)
	return __builtin_fabs(__x)==__builtin_inf() 
end
function __inline_isinfl(__x)
	return __builtin_fabsl(__x)==__builtin_infl() 
end
function __inline_isnanf(__x)
	return __x~=__x 
end
function __inline_isnand(__x)
	return __x~=__x 
end
function __inline_isnanl(__x)
	return __x~=__x 
end
function __inline_signbitf(__x)
	local _UNNAMED =
	{
		__f = nil,
		__u = nil,
	}
	local __u = 
	local _UNNAMED =
	{
		__f = nil,
		__u = nil,
	}__u.__f=__x 
	return C.cast("int", (__u.__u/C.bitrshift*31 ))
end
function __inline_signbitd(__x)
	local _UNNAMED =
	{
		__f = nil,
		__u = nil,
	}
	local __u = 
	local _UNNAMED =
	{
		__f = nil,
		__u = nil,
	}__u.__f=__x 
	return C.cast("int", (__u.__u/C.bitrshift*63 ))
end
function __inline_signbitl(__x)
	local _UNNAMED =
	{
		__ld = nil,
		local _UNNAMED =
		{
			__m = nil,
			__sexp = nil,
		},
		__p = 
		local _UNNAMED =
		{
			__m = nil,
			__sexp = nil,
		}
		,
	}
	local __u = 
	local _UNNAMED =
	{
		__ld = nil,
		local _UNNAMED =
		{
			__m = nil,
			__sexp = nil,
		},
		__p = 
		local _UNNAMED =
		{
			__m = nil,
			__sexp = nil,
		}
		,
	}__u.__ld=__x 
	return C.cast("int", (__u.__p.__sexp/C.bitrshift*15 ))
end
function __inline_isnormalf(__x)
	return __inline_isfinitef(__x) and __builtin_fabsf(__x)>=__FLT_MIN__ 
end
function __inline_isnormald(__x)
	return __inline_isfinited(__x) and __builtin_fabs(__x)>=__DBL_MIN__ 
end
function __inline_isnormall(__x)
	return __inline_isfinitel(__x) and __builtin_fabsl(__x)>=__LDBL_MIN__ 
end
function acosf()
end
function acos()
end
function acosl()
end
function asinf()
end
function asin()
end
function asinl()
end
function atanf()
end
function atan()
end
function atanl()
end
function atan2f()
end
function atan2()
end
function atan2l()
end
function cosf()
end
function cos()
end
function cosl()
end
function sinf()
end
function sin()
end
function sinl()
end
function tanf()
end
function tan()
end
function tanl()
end
function acoshf()
end
function acosh()
end
function acoshl()
end
function asinhf()
end
function asinh()
end
function asinhl()
end
function atanhf()
end
function atanh()
end
function atanhl()
end
function coshf()
end
function cosh()
end
function coshl()
end
function sinhf()
end
function sinh()
end
function sinhl()
end
function tanhf()
end
function tanh()
end
function tanhl()
end
function expf()
end
function exp()
end
function expl()
end
function exp2f()
end
function exp2()
end
function exp2l()
end
function expm1f()
end
function expm1()
end
function expm1l()
end
function logf()
end
function log()
end
function logl()
end
function log10f()
end
function log10()
end
function log10l()
end
function log2f()
end
function log2()
end
function log2l()
end
function log1pf()
end
function log1p()
end
function log1pl()
end
function logbf()
end
function logb()
end
function logbl()
end
function modff()
end
function modf()
end
function modfl()
end
function ldexpf()
end
function ldexp()
end
function ldexpl()
end
function frexpf()
end
function frexp()
end
function frexpl()
end
function ilogbf()
end
function ilogb()
end
function ilogbl()
end
function scalbnf()
end
function scalbn()
end
function scalbnl()
end
function scalblnf()
end
function scalbln()
end
function scalblnl()
end
function fabsf()
end
function fabs()
end
function fabsl()
end
function cbrtf()
end
function cbrt()
end
function cbrtl()
end
function hypotf()
end
function hypot()
end
function hypotl()
end
function powf()
end
function pow()
end
function powl()
end
function sqrtf()
end
function sqrt()
end
function sqrtl()
end
function erff()
end
function erf()
end
function erfl()
end
function erfcf()
end
function erfc()
end
function erfcl()
end
function lgammaf()
end
function lgamma()
end
function lgammal()
end
function tgammaf()
end
function tgamma()
end
function tgammal()
end
function ceilf()
end
function ceil()
end
function ceill()
end
function floorf()
end
function floor()
end
function floorl()
end
function nearbyintf()
end
function nearbyint()
end
function nearbyintl()
end
function rintf()
end
function rint()
end
function rintl()
end
function lrintf()
end
function lrint()
end
function lrintl()
end
function roundf()
end
function round()
end
function roundl()
end
function lroundf()
end
function lround()
end
function lroundl()
end
function llrintf()
end
function llrint()
end
function llrintl()
end
function llroundf()
end
function llround()
end
function llroundl()
end
function truncf()
end
function trunc()
end
function truncl()
end
function fmodf()
end
function fmod()
end
function fmodl()
end
function remainderf()
end
function remainder()
end
function remainderl()
end
function remquof(, )
end
function remquo(, )
end
function remquol(, )
end
function copysignf()
end
function copysign()
end
function copysignl()
end
function nanf()
end
function nan()
end
function nanl()
end
function nextafterf()
end
function nextafter()
end
function nextafterl()
end
function nexttoward()
end
function nexttowardf()
end
function nexttowardl()
end
function fdimf()
end
function fdim()
end
function fdiml()
end
function fmaxf()
end
function fmax()
end
function fmaxl()
end
function fminf()
end
function fmin()
end
function fminl()
end
function fmaf(, )
end
function fma(, )
end
function fmal(, )
end
function __inff()
end
function __inf()
end
function __infl()
end
function __nan()
end
function __exp10f()
end
function __exp10()
end
function __sincosf(__x, __sinp__cosp)
end
function __sincos(__x, __sinp__cosp)
end
function __cospif()
end
function __cospi()
end
function __sinpif()
end
function __sinpi()
end
function __tanpif()
end
function __tanpi()
end
function __sincospif(__x, __sinp__cosp)
end
function __sincospi(__x, __sinp__cosp)
end
local __float2 =
{
	__sinval = nil,
	__cosval = nil,
}
local __double2 =
{
	__sinval = nil,
	__cosval = nil,
}
function __sincosf_stret()
end
function __sincos_stret()
end
function __sincospif_stret()
end
function __sincospi_stret()
end
function __sincosf(__x, __sinp, __cosp)
	local __stret = __sincosf_stret(__x)*__sinp=__stret.__sinval *__cosp=__stret.__cosval 
end
function __sincos(__x, __sinp, __cosp)
	local __stret = __sincos_stret(__x)*__sinp=__stret.__sinval *__cosp=__stret.__cosval 
end
function __sincospif(__x, __sinp, __cosp)
	local __stret = __sincospif_stret(__x)*__sinp=__stret.__sinval *__cosp=__stret.__cosval 
end
function __sincospi(__x, __sinp, __cosp)
	local __stret = __sincospi_stret(__x)*__sinp=__stret.__sinval *__cosp=__stret.__cosval 
end
function j0()
end
function j1()
end
function jn()
end
function y0()
end
function y1()
end
function yn()
end
function scalb()
end
local signgam

function rinttol()
end
function roundtol()
end
function drem()
end
function finite()
end
function gamma()
end
function significand()
end
local exception =
{
	type = nil,
	name = nil,
	arg1 = nil,
	arg2 = nil,
	retval = nil,
}
do
	return 0
end